一个自媒体信息发布平台    (内容管理系统)  CMS缩写
前台: 面向大众的 
后台: 面向管理员的  后台管理前台展示的内容 
1.需求说明
 用户登录  内容管理  分类管理  评论管理   用户管理  网站设置
(1) 用户登录   login.php
登录界面可以根据是否填写表单内容拒绝登录操作
用户名改变时动态获取头像
管理员可以通过用户名和密码登录到后台
(2) 内容管理    index.php
管理员可以通过管理后台查看全部内容
管理员可以通过管理后台增加内容
管理员可以通过管理后台删除内容
管理员可以通过管理后台修改内容
(3) 分类管理   categories.php
管理员可以通过管理后台查看全部分类
管理员可以通过管理后台增加分类
管理员可以通过管理后台删除分类
管理员可以通过管理后台修改分类名称
(4) 评论管理
管理员可以通过管理后台查看全部评论
管理员可以通过管理后台审核评论
管理员可以通过管理后台删除评论
(5) 用户管理
管理员可以通过管理后台查看全部用户
管理员可以通过管理后台增加用户
管理员可以通过管理后台删除用户（不能删除当前登录用户）
管理员可以通过管理后台禁用用户
(6) 网站建设
管理员可以通过管理后台维护侧边导航的菜单
管理员可以通过管理后台维护首页轮播
管理员可以通过管理后台维护推荐位展示
(7) 公共模块
通过左侧边栏导航菜单访问不同分类内容
通过右侧边栏搜索框搜索指定关键词的内容
通过右侧边栏查看随机推荐内容
通过右侧边栏查看广告（广告位）
通过右侧边栏查看最新的评论内容
通过页脚区域的展示了解网站相关信息
(8) 首页
通过首页查看最新推荐位内容
通过首页查看一周热门内容，并可以为每一条内容点赞
通过首页查看最新发布内容
通过首页查看编辑推荐内容
通过滚动触发加载当前界面上需要显示的图片
(9) 列表页
通过列表页查看不同分类下的内容
通过列表页滚动到底部查看早期发布的内容
通过列表页的点赞按钮为不同内容点赞
(10)详情页
通过详细页查看不同文章相关信息（所属分类、发表时间、作者、阅读次数、评论次数）
通过详细页查看不同文章具体的详细内容
通过详细页的点赞按钮为不同文章点赞
通过详细页分享链接将当前文章分享到不同的社交媒体
通过详细页访问当前文章的上一篇和下一篇文章
通过详细页分页查看不同文章的评论列表
通过详细页查看当前文章的相关推荐文章
通过详细页给不同文章提交评论

ps. 使用wordpress  typecho   
需要开启php中的pdo扩展  数据库适配器
3.功能点分析
4.动态网站的缘由
5.开发流程简介
需求分析    XMind
原型设计    modao  axure  原型交互设计软件
UI设计       线框图  rebom.uieee.com   PS AI  Sketch
技术选型    数据库技术栈 后端技术栈 前端技术栈  考虑 : 人 业务(技术适合做这个)
数据库设计 创建数据库表 
项目架构设计  搭架构 基本的项目结构   编写基础的公共模块代码和组织代码 airbnb.js风格
业务迭代开发 开发者的日常  基于项目架构下完成各项业务功能
集中测试     将所有功能模块整合到一起过后,集中测试业务功能是否有BUG,是否满足需求
部署上线     开发环境向生产环境转换,就是把应用部署到服务器
=====================================
数据库设计
Options   id  name  value    记录网站的一些配置信息 (网站标题,描述等)
Users       id  slug(链接)  email   password  nickname  avatar  bio  status
Posts       id  slug  title  feature(文章图像)  created(时间)   content  views likes status user_id  catagory_id
Comments id author email  created content status  post_id   parent_id(父id)--评论谁的
Categories  id  
======================================
技术选型: php mysql  jquery  插件  bootstrap NProgress    animation.css
======================================
项目架构 : 前台和后台分开部署   
前台访问地址: 120.78.148.176:8080
后台访问地址: 120.78.148.176:8080/admin
└── baixiu ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 项目文件夹（网站根目录）
├── admin ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 后台文件夹
│ └── index.php ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 后台脚本文件
├── static ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 静态文件夹
│ ├── assets ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 资源文件夹
│ └── uploads ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 上传文件夹
└── index.php ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 前台脚本文件
静态文件: 
└── baixiu ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 项目文件夹（网站根目录）
├── ......
├── static ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 静态文件夹
│ ├── assets ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 资源文件夹
+ │ │ ├── css ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 样式文件夹
+ │ │ ├── img ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 图片文件夹
+ │ │ ├── js ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 脚本文件夹
+ │ │ └── venders ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 第三方资源
│ └── uploads ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 上传文件夹
+ │ └── 2017 ∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙ 2017 年上传文件目录
基本原则: 一个页面一个php文件
PHP不报错    display_errors= on    php.ini文件中  设置为on
第三方文件  :保存在vendors文件夹下
整合后台页面
ps 老师的github   github.com/zce/  
================
*ren  *.html  *.php   控制台批量改文件扩展名   ren  *.txt 1*.txt
*批量替换路径   使用绝对路径  除引用配置文件外
1.抽离公共部分
  解决不同页面的高亮显示问题   -- 定义一个变量保存当前页面  current_page ='index'   可以使用数组 
    $_SERVER['PHP_SELF']   也可以使用  可以不用定义一个变量
    如下:     php echo $current_page == 'dashboard' ? ' class="active"' : '';
二级菜单:  php echo in_array($current_page, array('posts', 'post‐add', 'categories')) ? 'class="active"' : ''; 
切图: 需要把登录后的加上去
=============================
login.php 实现   animate.css
novalidate   加到form上  去取消默认检验  autocomplete=off  关闭自动完成
调整form表格:
1. 给 form 表单添加 action 和 method 属性
2. 给邮箱和密码框添加 name 属性
3. 将登录按钮由 a 链接改为 button 提交按钮
后台php: $_SERVER['REQUEST-METHOD']==='POST'
错误信息定义一个全局变量接收
搜索引擎 "邮箱 正则"   site:网址
attr('src',res);   fadeOut(function(){ } )  回调函数
limit 1提高数据库查询效率
php中  function_exists(fn)  js中判断是否函数  typeof fn = 'function'
header('Location: /admin/');  
require_once 路径问题  写物理路径   在项目中写了相对路径
=============================
index.php
已登录状态保持功能  保存当前用户的信息
使用到  baixiu_fetch_one()
‐‐ 文章总数: select count(1) from posts
‐‐ 草稿总数: select count(1) from posts where status = 'drafted'
‐‐ 分类总数: select count(1) from categories
‐‐ 评论总数: select count(1) from comments
‐‐ 待审核的评论总数: select count(1) from comments where status = 'held'
$data[] = $row;  数组装入数组中   也可以装字符串
使用chart.js插件   echart.js
==============================
categories.php--分类目录
1.获取全部数据  并渲染  php混编方式
2.添加分类 使用post方式  没有id
3.编辑分类信息  id传值   获取全部数据最后执行
4.checked文本框   选定就把id添加到数组中   全选和不选  删除功能
foreach ($categories as $item){ }
$btnDelete.prop('search', '?id=' + allCheckeds)  把数组添加到DOM对象属性的search中  
数据库  id in ('.$id.');';
==============================
post.php  所有文章
1.获取数据并渲染数据
2.数据过滤输出   有inner join  也有使用函数改格式  日期和状态  作者信息 
3.分页逻辑
4.筛选数据  记住筛选状态   还有点击分页把状态带到url中
=====================
ps: 从使用者的角度考虑每一个所需功能，反推出来对接口的要求，
然后具体实现每个要求，这就是所谓的逆向工程。
=====================
时间处理 :  $timestamp = strtotime($created);    return date('Y年m月d日</b\r>H:i:s', $timestamp);
*********联合查询   post.php中   注意重名在关联数组中不能  指定字段提高效率
select
posts.id,
posts.title,
posts.created,
posts.status,
categories.name as category_name,
users.nickname as author_name
from posts
inner join users on posts.user_id = users.id
inner join categories on posts.category_id = categories.id;
***********
***********  分页提高效率
select
posts.id,
posts.title,
posts.created,
posts.status,
categories.name as category_name,
users.nickname as author_name
from posts
inner join users on posts.user_id = users.id
inner join categories on posts.category_id = categories.id
order by posts.created desc
limit 0, 10
****************
分页展示模块   使用手写方式
is_numeric($_GET['p'])    intval($_GET['p'])  判断是否为数字   转化为数字
***********分页显示逻辑   参数计算
$left = floor($visible / 2);
// 开始页码
$begin = $page ‐ $left;
// 确保开始不能小于 1
$begin = $begin < 1 ? 1 : $begin;
// 结束页码
$end = $begin + $visible ‐ 1;
// 确保结束不能大于最大值 $total
$end = $end > $total ? $total : $end;
// 如果 $end 变了，$begin 也要跟着一起变
$begin = $end ‐ $visible + 1;
// 确保开始不能小于 1
$begin = $begin < 1 ? 1 : $begin; 
================================================
sql注入  删除全部   where 1=1
attr  和  prop的区别  jquery中\
*console.dir
1.列表数据查询
2.插入
 post请求
3.更新
  post请求 +id = 1
if  :  else:  endif
退出登录   unset
php.ini    session_name = PASSEESIONID
专门触发事件的  tigger('change')
==============================
所有文章
输出判断逻辑或者转换逻辑过于逻辑   不建议写在混编位置
数据库查询太多是可行的
$timestamp = strtotime($created);      return date('Y年m月d日</b\r>H:i:s', $timestamp);  处理时间格式
定义函数  get_category  get_user
关联数据查询  内连接
SELECT posts.`category_id`,
posts.`title`,
categories.`name` AS `category_name`,
users.`nickname` AS `user_name`,
posts.`created`,
posts.`status`
FROM posts 
INNER JOIN  categories ON posts.`category_id` = categories.`id`
INNER JOIN users ON posts.`user_id` = users.`id`
===========
asc  desc
(int)ceil()  向上取值  出来是float类型
where '1=1';   事件注入
字符串要注意mysql中要有引号才有效
header('Location:'.$_SERVER['HTTP_REFERER']);    从哪来回哪去
res.success && $tr.remove()
=============
UEidtor  富文本编辑器   CKEditor   Tinymce
config.json  图片的默认存储位置
富文本编辑器的原理   contenteditable
========
printf  %s   %d   填坑   直接输出
sprintf   返回值
=======
comments  利用ajax发请求
jsrender     
{{!-- <tr> 
      <td>{{:index}}</td>
      <td>{{:content}}</td>
</tr> --}}   注释

编程字体   Consolas  Fira Code  Source Code Pro
ajax比php编程快很多
ajax配合loading
Postman
不是全部html网页都是可以双击运行的   有些文件引用方式问题
加载特效   loading.io  https://www.awesomes.cn/
ajax性能  搜索引擎优化问题   seo   sem花钱用的  
返回json数据需要设置 header('Content-Type:application/json'); 不然返回的还是string  
发ajax鼠标变了
font-size:0px;
onchange事件
联合父ID的
