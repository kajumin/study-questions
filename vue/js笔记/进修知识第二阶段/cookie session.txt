cookie是服务器给客户端发送的一个小纸条，我第一次访问服务器，服务器可以向客户端发送一个cookie，可以往这个cookie里保存数据，客户端浏览器接收到服务器响应的cookie之后，会保存起来
但给我的客户端再次访问时，会把这个cookie里的数据写到服务端

//cookie 输出到客户端，也是以键值对的方式输出到客户端的.
setcookie("username","joycechu");

第二次访问(第二个php)
echo $_COOKIE["username"];

原理：
发送一个请求给服务器，服务器给客户端发送cookie，这个cookie的值
是通过响应头名称Set_Cookie的响应头的值，是设置这个值，客户端拿到这个set-cookie之后，
会按照http协议的方式进行解析，把cookie进行保存，接下来当我再次去请求服务器，
客户端会把cookie里面的数据以Cookie: username-jocyce
请求的方式发送到服务器

生命周期：
内存cookie 服务器发送一个cookie 这个cookie保存在客户端浏览器的内存中  关闭浏览器就没了
$bang = $_POST["user"]; 
setcookie("user", $bang);

硬盘cookie 保存在硬盘上面，一直有效，除非删除 
setcookie("password", "123456"",time()+60*60*24);   一天后销毁

追杀cookie  把之前写到客户端的cookie清除掉
setcookie("password", "",-1);

http协议是基于请求，响应的，请求=>响应  连接就会断开，http协议它是无状态的，服务端不能
记住客户端的状态，cookie它是用来记住用户状态的，用来进行多个请求之间的数据共享，cookie是保存在客户端的。

session(会话): 一次会话由多次请求组成   依赖cookie

一个网站的会话由多次http请求组成，http 请求是无状态的，是基于请求响应的，每个请求又都是相互独立的
一次会话范围内要进行数据的共享，每个请求都是独立，就不能进行数据的共享。
无状态：请求--》响应  连接断开。我要在一个会话范围内进行数据共享，这个时候我们就需要使用session.

当我第一次请求这个session1.php($_SESSION["username"]=$username)的时候,
我们首先执行session_start(),这个方法会到session池中去查找没有没有一个session,
根据客户端传递过来的cookie的sessionID去查找,假设是客户端没有传递,
服务器会创建一个session,把session放在session池中
然后以关联数组的形式去存放sessionID作为key,session作为值去进行存储,
然后给客户端一个响应头,这个响应头就是一个cookie,这个cookie存的就是sessionID

第一次访问一个php:  Set-Cookie: PHPSESSID=qs61ijmv8v0a2jquub2sihe685; path=/
第二次访问另一个php: 会把cookie带到服务器上 PHPSESSID=qs61ijmv8v0a2jquub2sihe685
获取到客户端传递的cookie, 从cookie里面获取sessionID, 然后根据sessionID从session池中
去获取session, 获取到session之后给$_SESSION变量赋值, 这个时候就可以从session里面拿到数据

web会话并不是浏览器开始访问一个网站会话就开始了,而是服务器创建了session, 然后向客户端响应了
一个cookie, cookie里面保存了sessionID,这个时候会话开始,关闭浏览器会话也不会结束.

会话结束的两种情况: 服务器的session超时(默认24分钟),这个时候会话结束.
第二种情况用户把客户端的cookie清除

心跳机制: 再次拿过session,会再次激活,相当于session又可以存活24分钟.

session同步问题

访问视频网站: 自动跳放   localStroage   阅读

案例: 我要进入一个页面,这个页面已经登录了,我们就欢迎欢迎

ajax:
同步交互: 客户端给服务器发送请求，服务器给客户端一个响应，响应回来的数据会把客户端的界面给覆盖，我们把这种交互称为同步交互。

异步交互: 客户端给服务器发送一个请求，服务器给客户端一个响应，响应回来的数据不会把原来的页面覆盖掉，这种我们称为异步交互。

概念:  ajax就是实现页面不刷新,可以直接获取服务器端数据
原理:  浏览器提供了一个js对象,这个对象XMLHttpRequest, 通过这个对象我们可以
发送请求, 接收请求, 处理请求
js代码请求:
function send(){ } 这个方法里面去发送请求, 接收请求
作业:  检测用户名是否已经存在
注销登录。
