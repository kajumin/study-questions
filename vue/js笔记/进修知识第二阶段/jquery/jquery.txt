http://www.jq22.com/      jquery库
http://www.htmleaf.com/
fullPage.js   https://www.dowebok.com/143.html
=======
丰富的选择器  (层次 组合 内容过滤 属性过滤 状态 可见性)
jq对象和dom对象的转换 get(0)  [0]  ||  $()
加载机制 
基本操作(html text) 属性操作(attr props)  样式操作(css)  类操作(class)  尺寸获取(width innerWidth)  位置获取(offset position)
元素操作(插入(内部 外部 包裹)  移除  替换 复制)
事件   bind绑定多个事件  on  delegate 解绑: unbind  off  undelegate
动画   显示隐藏(show hide toggle)  渐变(fadeOut fadeIn fadeTo fadeToggle) 滑动(slideDown slideUp slideToggle)   
         自定义animate
ajax  辅助函数(serialize serializeArray)   load(url[, data][,complete(text, status, xhr)])  快捷ajax
$.方法  each type  map now trim params parseJSON  isArray   inArray  toArray  unique 
            extend(true, newobj, obj)拷贝
            $.noconflict
$('form').serialize   $('form').serializeArray  $().size(废弃)==length  $().get(number)   $().index()
=======
(1)、基本选择器：#id，class,  element,  *;
(2)、层次选择器：parent > child，prev + next ，prev ~ siblings
(3)、基本过滤器选择器：:first，:last ，:even ，:odd ，:eq(0) ，:gt(4) ，:lt(4) , :not()
(4)、内容过滤器选择器： :contains ，:empty，:has ，:parent
(5)、可见性过滤器选择器：:hidden ，:visible    display: none;   input  hidden
(6)、属性过滤器选择器：[attr] [attr=value] [attr!=value] [attr^=value] [attr$=value] [attr~=value] [attr*=value]详情看最底
(7)、子元素过滤器选择器：:nth-child ，:first-child ，:last-child ，:only-child
(8)、表单选择器： :input ，:text ，:password ，:radio ，:checkbox ，:submit  :button；
(9)、表单过滤器选择器：    :enabled ，:disabled ，:checked ，:selected
(10)  组合选择器  $('div,p,a')

======加载机制
$(window).load()  对应  window.onload  按顺序执行
$(document).ready(function(){})    $(function(){})     jQuery(function(){})   等价于但是DOMContentLoaded优先执行 
======js与jq对象
jq转化为js对象     =>   jq[0]   ||   jq.get(0)
js转化为jq对象     =>   $(js对象)  

============简单操作
html()  //相当于innerHTML  获取 | 设置   html('innerHTML')   可以是数组
text()   //相当于innerText    获取 | 设置  text('innerText')   
val()   //获取value值
index()   获取索引
get(number)   //获取原始dom对象
.length   //获取匹配元素个数

css(attr, value)   css({"key1":"value1","key2":"value2"})  //可以是字符串 对象


===========属性操作
一个js对象有很多property，该集合名字为properties，properties里面有其他property以及attributies,
attributies里面有很多attribute

常用的attribute，如: id、class、name、title等一般都会作为property附加到js对象上，可以和property一样取值、赋值

自定义属性data-*  只能通过attr获取 prop获取为undefined
案例: 
(1)只有property属性的value值是输入的值，attribute属性的value值依旧没有变
(2)改变attribute时, property不会改变,  但attribute的value值只在初始化的时候跟property一样
(3)对于class、id、name等属性，无论哪一方面发生改变，都会互相影响
(4)对于新增的属性，都不会影响到其他一方
property: 属性   property是DOM中的属性，是JavaScript里的对象；
               Property是这个DOM元素作为对象，其附加的内容，例如childNodes、firstChild等
attribute: 特性   attribute是HTML标签上的特性，它的值只能够是字符串；
                attribute是dom节点自带的属性 如:class id  title  name 
attributes是属于property的一个子集
Property属性可以赋任何类型的值，而对特性Attribute只能赋值字符串！

attr("checked")    //获取属性值   删除属性: removeAttr || attr(attr, null) 
                           //attr(attr, function(index,value){return})
                           //attr(object)
prop("checked")  //获取属性值   removeProp

data(key,value)   //获取设置(看不到) || 获取   $.data(ele, key, value)

=========== 类操作样式
addClass('')         //多个使用空格间隔
removeClass('')   //没有参数则为全部
hasClass('')         //是否包含
toggleClass('')    //只有一个类名

================基本选择器: * id class element 并集
id="da:q"                  $("#da\\:q)  需要两个斜杠
$("span,p,li,div")        并集
================层级选择器: 后代 相邻后代 相邻兄弟 兄弟
$("#dv  p")               后代
$("#dv > p")            相邻后代
$("#dv + p")            后面第一个p  和.next()一样
$("#dv ~ p")            后面所有直接的p   和.siblings一样
================基本过滤:  eq(从0开始) first last lt() gt() even odd not(selector)
:first  :last                获取的选中元素的第一个元素 | 最后一个
$("#uu>li:even")      奇偶数 odd 
$("#uu>li:eq(4)")      索引   等于
$("#uu>li:lt(4)")        索引   小于
$("#uu>li:gt(-4)")     索引   大于
:not(selector)            "input:not(:checked)"
:animated  
div:header
div:lang(en)              指定语言

============内容过滤:  :contains(str)    :has(selector)  :parent 对立面  :empty 
div:contains("中")       内容选择器    文本含有
ul:has([id])                 内容选择器    li有id属性即该ul选中   div:has(p)
div:empty                  内容选择器    文本为空
div:parent                 内容筛选        有子元素或者文本的元素   :empty对立面

==============可见性过滤: :hidden :visible
:visible  
:hidden  display: none  input hidden   宽高为0  祖先元素是隐藏的

==============属性过滤: [class] [class*=str]  [class=str]  [class!=str] [class$=str]  [class^=str] 
[class|=str](以前缀后跟-)  [class~=str](空格间隔)

[name*=value]        包含指定字符串
[name~=value]       用空格分隔的值中包含一个给定值的元素。
[name$=value]        结尾
[name^=value]       开头
[name!=value]        不等于
[title|="tag"]            指定字符或者以它开头
[id="tag"][title="tag"]   复合选择器

================表单过滤: button checkbox radio  file image input text  password   reset submit 类型
checked disbaled enabled focus selected  状态

:enabled  :disabled  :checked  :selected  :required  :focus

$('#myForm :input') 
:text  
:password  
:radio 
:submit
:image
:reset  
:button 
:file 
:select
===============子元素过滤:  first-child last-child first-of-type last-of-type nth-child() nth-of-type()
first-child跟 first区别: 前者是所有父元素的第一个(可以选择多个)   后者是所有匹配元素中的第一个
:first-child       :last-child
:first-of-type   :last-of-type

:nth-child()      :nth-last-child()
:nth-of-type()  :nth-last-of-type()
=============筛选  遍历筛选(选择的还是父元素)     格式:  $().eq();
.eq(index)
.first(selector)   .last(selector)
.slice(0, end)
.filter('.myClass');    过滤 只有.myClass的div
.has(selector)         选择的是ul1  跟:has(selector) 相同

.not(':eq(0)')    从匹配的元素集合中移除指定的元素。
.is(selector)            返回boolean值
.map(function(index,item))   //遍历
.contents()   //所有匹配元素的内容
end()
add()  //添加匹配元素
==============进一步取元素
.children(selector)   所有子元素
.find(selector)

prev()    prevAll() //前面的一个或者多个
next()    nextAll() //后面的一个或者多个
siblings(selector)
prevUnitil()  nextUnitil()

offsetParent()   第一个定位父元素
parent()           父元素
$('div').closest('form');   //选择离div最近的那个form父元素
parents(selector)         取多个
parentUnitil(selector)   取一个

add()      添加选择元素
end()      回退一个jq对象  链式条用时
==============================元素操作====================================
=========拷贝
.clone()          结合appendTo不会丢失原有的   注意id重复问题  true //包含绑定事件处理程序
=========插入元素(包裹)
.wrap()            在每个匹配的元素外层包上一个html元素。<div class="new" />   加多个div   包裹每个p
.wrapAll()        在所有匹配元素(一起)外面包一层HTML结构   只加一个div  包裹着所有p
.wrapInner()    在匹配元素里的内容外包一层结构
=========插入元素(内部插入)   上树(可以子选父, 也可以父选子)
.append()         在指定元素后面插入    appendTo(添加到指定元素最后面)   
.prepend()        在指定元素前面插入    prependTo(添加到指定元素最前面)
=========插入元素(外部插入)
.after()           (在指定元素后面插入)当兄弟    insertAfter(插入到指定元素后面)     都是当兄弟
.before()        (在指定元素前面插入)当兄弟    insertBefore(插入到指定元素前面)   都是当兄弟
=========移除元素
.detach()       自己不在  事件保留    
.remove()      自己不在  事件不保留    跟detach一样
.empty()        自己还在  清空所有内容    
.unwrap()      将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置。
=========替换元素
替换内容.replaceAll(被替换内容)     替换元素  replaceWith() 替换并返回删除的元素  目标和源相反
.replaceAll()    
.replaceWith()
$('<a></a>').replaceAll('<p></p>');       //p被替换成a
$('<a></a>').replaceWith('<p></p>');   //a被替换成p

===========动画
.animate( properties [, duration ] [, easing ] [, complete ] )  //第一种
properties:  一个CSS属性和值的对象, 动画将根据这组对象移动。
可以不带单位 可以使用递增 {left: '+=100'}


.animate( properties, options )   //第二种
options{ duration,easing, queue:'string', complete, done, progress}  
{
queue      //dequeue('string')调用
progress  //每一步都会执行  很多次
}
hide(400)  hide(400, fn(){})  hide(400, easing(swing||linear), fu(){})   hide({})   四种书写方法
第一种: hide(400) //slow fast normal
第二种: hide(string, swing)  //linear
第三种: hide(string, swing, function(){})
第四种: hide({duration, easing, callback})

hide(number | string | object)    fast normal  slow  默认400
object(duration: 400,easing: swing,queue: true,done:fn(){}, fail:fn(){} ,complete:fn(){})
show(number | string | object)    jq提供的曲线函数swing  linear
slideUp(number | string | object)
slideDown(number | string | object)
slideToggle(number | string | object)

fadeIn(number | string | object)
fadeOut(number | string | object)
fadeToggle(number | string | object)

fadeTo(number | string, 0.5);   第二个参数   写法fadeTo(duration, opacity, easing, complete)
slideDown()
slideToggle()
slideToggle()

animation()
参数:  参数可以随便写几个
  * 1.是键值对---对象
  * 2.时间---1000毫秒---1秒
  * 3.easing
  * 4.匿名函数---回调函数
stop()   停止匹配元素当前正在运行的动画    默认false
参数一:  指示是否取消以列队动画    清空动画的意思
参数二:  是否当前动画立即完成       立刻完成的意思  false的话就中途去执行下一个动画效果
finish()             stop()中可以设置(参数一)
clearQueue()    stop()中可以设置(参数二)
dequeue()        执行匹配元素队列的下一个函数。
delay               设置一个延时来推迟执行队列中后续的项。
queue('fx')       查看已有执行动画队列  

===============获取元素属性
width()                //100  元素尺寸 border-box   可以是字符串和带单位
innerWidth()       //140  元素内部尺寸  padding-box
outerWidth()       //160   
outerWidth(true) //170  加margin-box
===============位置获取
.offset()                 相对于文档返回{top: xx,left: xx}   pageX
.position()              相对于定位父元素的{top: xx,left: xx}
.scrollTop              .parent滚动的值


$(window).width()         //1349
$(document).width()     //1349
============事件
绑定事件: 
eventName(function(){})   如:click(function(){})
on()             //.on(type[, selector][, data][, callback])  || .on(events(对象)[, selector] [, data]) 可以使用命名空间 click.myclick
                   //type可以是多个   如:  'mouseenter mouseleave'                   
	   //忽略selector为直接绑定事件
                   //事件委托时, 事件处理程序只能绑定在当前被选中的元素(委托元素)上, 必须存在
                   //on("click", false)   会阻止默认行为 和冒泡行为
                   //callback(e, data)  接收一个data数据    调用trigger('click', object)可以传递进来

one()           //.one(type [,selector ] [,data] [,callback])  ||  .one( events(对象) [, selector ] [, data ] )
bind()          //bind(type[, data], handler)    //绑定多个  bind(events)  bind({'click': fun1, 'mouseenter', fun2})
delegate()   //.delegate(selector, type, [, data] [,handler])   || .delegate(selector, events(对象));
解绑事件:
off()    //父.off()  如果子事件是通过delegate,  可以解绑父子事件,  子事件如果是on绑定则不行
          //off()   全部事件   off(type) 指定事件
触发事件:
click()     trigger('click')   triggerHandler() (默认事件不会触发)
取消事件冒泡:
return false;   e.stopPropagation();
e.isPropagationStopped() //返回boolean
取消默认行为:
return false;   e.preventDefault();
e.isDefaultPrevented()     //返回boolean


 * bind:   .unbind()   解绑   .one()   事件只执行一次
 * 绑定多个事件
 * 参数:{ "事件的类型": 事件处理函数, .... }
delegate:  参数一: 绑定的元素  参数二: 事件名称  参数三: 匿名函数    undelegate  事件委托
	$("table").delegate("td", "click", function() {
  		$(this).toggleClass("chosen");
	});

e.delegateTarget   始终是委托人   e.target  触发事件的元素    e.currentTarget  绑定事件的元素等于this

trigger('click')        主动触发事件  triggerHandler("click')  触发事件   第三种不会触发浏览器事件(focus)
hover(enter,leave)

resize
scroll
$(document).ready( )   img.ready()
blur   change   focus  select   submit 
keydown  keypress  keyup
click  dblclick 
mousedown mousemove mouseup
mouseenter mouseleave  
mouseover  mouseout
.focusin()     子元素获得焦点  可以冒泡   但是focus和blur都是不可以冒泡的
.focusout()   子元素失去焦点  可以冒泡   但是focus和blur都是不可以冒泡的
=========事件对象
e.currentTarget      //绑定事件的元素
e.target                 //触发事件的元素 
e.delegateTarget   //事件委托的元素
e.originalEvent      //js原始event对象
e.type    //事件类型
e.data    //事件数据  通过$().on('click',{index: 1}, func)  传递进来的  最好使用对象
e.which  按下的键   ==  e.keyCode
e.timeStamp  //事件触发时距离1970年1月1日的毫秒数
e.result          //事件被触发的一个事件处理程序的最后返回值
e.stopImmediatePropagation()   //阻止剩余的事件处理函数执行并且防止事件冒泡到DOM树上。
e.relateTarget  //在事件中涉及的其它任何DOM元素。  mouseleave
e.namespace   //事件被触发时此属性包含指定的命名空间  $.bind('name', fun(){})  e.namespace == name;// true
==========函数方法
$.each()        //遍历   $('li').each(function(index,value){})
$.trim(str)     //去除两端空格
$.type()        //数据类型
$.isArray()    //是否数组
$.toArray()         //返回一个包含jQuery对象集合中的所有DOM元素的数组
$.inArray()         //搜索指定元素  返回索引
$.isFunction()  //是否函数
$.unique(arr.sort())   //数组去重
$.parseJSON   //json对象===>js对象
$.now()         //返回当前时间戳
$.map()         //类似数组map方法  map(arr, fun(value,index))
$.makeArray() 将对象转化为数组。

$.params(data)   //创建一个数组或对象序列化的的字符串，适用于一个URL 地址查询字符串或Ajax请求。

$.extend(target, obj1,...)    将obj1中属性添加到target中   obj1中的复杂数据类型会跟随target变化
$.extend(true,target,obj)   有数据添加   重名覆盖   obj1中的复杂数据类型不会跟随target变化
第一个参数: true  深拷贝   对象中的复杂数据类型   不深拷贝则不设置  
//深拷贝  改复杂数据类型 也不会改变原来的
//浅拷贝  改复杂数据类型 改变原来的

===========$().funName
$("form").serialize()          不接受参数     将用作提交的表单元素的值编译成字符串。
$("form").serializeArray()  不接受参数     将用作提交的表单元素的值编译成数组
birthday,    2020-02-04  date值   没选择为空
subject, 0   获取select值时  获取value中的值  没有再text值   没选择默认值
gender, 1   获取radio值时   获取value中的值   没选择不存在

.size()     //返回的jQuery对象匹配的DOM元素的数量  等价于length     
.get(number)   //获取第几个   等价于$().[number]
.index()   //获取下标

=======插件和库问题
$.fn.pluginsname = fun         //添加插件    等同于$.fn.extend(Object)  使用$('ul').pluginsname() 
$.funName                            //添加$方法   等同于$.extend(Object)     使用$.funName()
var xy=$.noConflict();             //多库共存  去除$使用xy替代
$    是函数
$()  是jq对象

var mm = jQuery.noConflict();  //重名$   jq放弃$变量
$.proxy(changecolorfn, $('#box'))  //点击谁都会执行#box的this指向


.ajaxComplete()   .ajaxError()   .ajaxSend()   .ajaxStart()  .ajaxStop()   .ajaxSuccess()
encodeURIComponent和decoceURIComponent、encodeURI、decoceURI。
==================================================ajax
.load(url [, data ] [, complete(responseText, textStatus, XMLHttpRequest)])
$.get( url [, data ] [, success ] [, dataType ] )  ||   $.get(setting)
$.ajax(settings)   $.ajax(url[, settings])
settings(url, method(type旧版), data, dataType, successs,error, jsonp, jsonpCallback traditional传统序列化)

traditional: false;       // 默认fasle  传统序列化 对于处理数组数据时 true:  list=a&list=b  false:  list[]=a&list[]=b
processData : false,   // 不要去处理数据   对于formData数据时
contentType: false,    // 请求数据的格式  默认application/x-www-form-urlencoded   对于处理文件上传时 
=====================================================
注意:
1. 使用最新的jquery
2. 较慢的选择器：class选择器  不同浏览器不同  Firefox、Safari、Chrome、Opera浏览器不慢
    最慢的选择器：伪类选择器和属性选择器
3.父与子: $parent.find('.child')  最快  父调用子 $('.child', $('#parent')) 较快 
              $parent.children('.child') 较慢 $('#parent > .child') 慢 $('#parent .child')更慢
4.不要过度使用jQuery     this.id   比  $(this).attr('id') 快
5. 做好缓存  多次操作的缓存起来
6. 使用链式写法
7. 事件的委托处理（Event Delegation） 委托给document  $(document).off("click", "td");   取消事件委托
    事件委托不要过多绑定到body或者document中   同时避免使用分层选择器
8. (1)少改动DOM结构 .append()、.insertBefore()和.insetAfter()
    (2) 一个DOM元素进行大量处理，应该先用.detach()方法
    (3)var elem = $('#elem');  $.data(elem[0], key, value);
9. 正确处理循环
10. 尽量少生成jQuery对象
     var $text = $("#text");  var $ts = $.text($text);    获取text 这个快
11. 选择作用域链最短的方法  closure模式要比prototype模式更快。  
12. 使用Pub/Sub模式管理事件  使用事件触发的形式  不使用调用多个函数
==================================================
工具方法:
　　$.grep()   返回数组中符合某种标准的元素。
　　$.isEmptyObject() 判断某个对象是否为空（不含有任何属性）。
　　$.isFunction() 判断某个参数是否为函数。
　　$.isPlainObject() 判断某个参数是否为用"{}"或"new Object"建立的对象。
　　$.support() 判断浏览器是否支持某个特性。
==================================================
(3)自定义动画
    1.animate( properties [, duration ](slow  fast 1000) [, easing ](swing linear) [, complete ] )
    2.animate( properties, options )
    $("#block").animate({
    	width: "70%",
    	opacity: 0.4,
    	marginLeft: "0.6in",
    	fontSize: "3em",
   	 borderWidth: "10px"
     }, 1500 );
   $( ".block:first" ).animate({
       left: 100
   }, {
    duration: 1000,
    step: function( now, fx ){
      $( ".block:gt(0)" ).css( "left", now );
    }
  });

   (3) stop(队列中的是否停,是否立即完成当前动画 ) 停止动画   $(this).children("ul").stop().slideDown(500);   应用

======属性选择器详解
[attribute*=value]
属性
a[hreflang|="en"]    |  以开始
*    包含
~   以空格间隔的值
$    结束
^   开始
!=  不存在
[]    有属性
[]="value" 有特定值
[][]  多个一起



