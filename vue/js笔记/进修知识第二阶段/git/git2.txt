key   19981122
mkdir learngit
cd  learingit
pwd

git  分布式
svn 集中式  perforce
1. git init
2. git add readme.txt  命令实际上就是把要提交的所有修改放到暂存区（Stage）
3. git commit -m "wrote a readme file"  一次性把暂存区的所有修改提交到分支
-m 后面输入的是本次提交的说明，可以输入任意内容，当然是有意义的，你就能从历史记录里方便地找到改动记录。
提交文件可以一次多个   文件只能一个个
=============================
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
git reset --hard HEAD^  上一个版本  ^表示上几个     ~100一百次前   版本回退
git reset --hard 1094a  又可以倒回去  删除后的还能回来
git reflog 用来记录每一次命令

git checkout -- fileName  可以丢弃工作区的修改  也可以是丢弃删除
git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用HEAD时，表示最新的版本。
git reset HEAD readme.txt    把暂存区的修改回退到工作区
2.命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
rm test.txt   删除文件
现在你有两个选择，一是确实要从版本库中删除该文件，那就用命令git rm删掉，并且git commit
 git rm test.txt       rm 'test.txt'     

1.
当你用git add命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交
