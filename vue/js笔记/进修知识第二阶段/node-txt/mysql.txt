net start mysql57   net stop mysql57   开启  停止命令
services.msc   打开服务
mysql -h localhost -u root -p123456
mysql -u root -p   //然后输入123456
exit        退出
C:\Program Files\MySQL\MySQL Server 5.7   //安装路径
==============命令大全
show databases;
use  databaseName;   使用数据库
show tables;
show create database [数据库名称];  查看数据库的创建sql
udpate mysql.user set authentication_string=password('[你的密码]') where user='[需要修改的用户名]'； 修改密码
show grants for [用户名]; 查看用户权限

=================创建  删除  数据库
create database mydatabase;
=================创建  删除 改名 表 
create table <表名> ( <字段名1> <类型1> [,..<字段名n> <类型n>]);
drop table <表名>;
rename table 原表名 to 新表名;
=================增删查改
select * from student;
insert into student values(1,' joan ',0, 89.2);  插入
update
delete from 表名 where 表达式   
update 表名 set 字段=新值,… where 条件  update MyClass set name='Mary' where id=1;
==================字段
alter table 表名 add字段 类型 其他;   增加字段
alter table MyClass add passtest int(4) default '0'

MySQL ALTER TABLE table_name DROP field_name;   删除字段

==================数据库(导出 查看 查看版本)
mysqldump -u 用户名 –p 数据库名 > 导出的文件名;     导出文件默认是存在mysql\bin目录下
desc student;   查看数据库结构
select version(); 
===连接数据库
const mysql      = require('mysql');
const connection = mysql.createConnection({
    host     : 'localhost',
    user     : 'root',
    password : 'secret',
    port: '3306',
    database:'test'
});
connection.connect(function(err) {
    if (err) {
        console.error('error connecting: ' + err.stack);
        return;
    }
    console.log('connected as id ' + connection.threadId);
});

connection.end(function(err){   console.log(err)})



CREATE TABLE `student`.`student`  (
  `id` int(0) NOT NULL AUTO_INCREMENT,
  `name` varchar(20) NOT NULL,
  `chinese` int(0) NOT NULL,
  `english` int(0) NOT NULL,
  `math` int(0) NOT NULL,
  PRIMARY KEY (`id`)
)
============================在node.js中
connection.connect(function(err){
	if(err) {
		console.error('error connecting: ' + err.stack);
        return;
	}
	// console.dir(connection);
	console.log('connected as id ' + connection.threadId);    //threadId
})
===========? 配合 []
let deletesql = 'DELETE FROM student where id=?';
let deleteParams = [4];
connection.query(deletesql, deleteParams, function(err,rows,feild) {
	if(err) {
		console.log(err);
	}else {
		console.log(rows)
	}
})
=====================escape
connection.query('select * from student where id = '+ connection.escape(userid),function(err,rows) {
	if(err) {
		console.log(err);
	}else {
		console.log(rows)
	}
})


==================mongodb  文档
 
========mongodb   nosql    structure query language  字段和类型
mongod --dbpath "f:\data\db" --logpath "f:\data\log\mongodb.log" --serviceName "mongodb" --serviceDisplayName "mongodb" --install    //把mongoDB安装成window服务
mongod     开机

mongoexport -d xsgl -c banji076 -o d:\data.json
导入: mongoimport -d xsgl -c banji076 D:\mongodb\data\data.txt --drop(删除已有的数据)
net start MongoDB 开启服务     mongod --path c:\database

MongoBooster    可视化管理软件
mongo 进入
use acticle      进入某个数据库   没有的会自动创建  但是没有数据是不会显示出来的
show dbs       查看全部数据
use xsgl 先进入 db.dropDatabase()  删除数据库
show collections  db.banji076.drop()   删除集合
show collections
db.banji076.remove({"name":"bang"})
db.banji076.insert({id:1,name:"bang"})  //插入
db.banji076.find()   //查看
db.banji076.find({"sex":"男","age":{"$gt":15}})
db.banji076.find({"$or":[{"sex":"男","age":{"$gt":15}} ,{"sex":"女","age":{"$lt":17}}]})

schema示数据库表结构的一种格式
model基于某个 schema 生成的某个表的模型对象，生成的模型对象上就有一系列的对数据库这张表操作的方法

qasystem   404107@qq.com  ASDasd12345  
===============node.js中使用
=======app.js
var mongoose = require("mongoose");
//数据库
mongoose.connect("mongodb://localhost/qasystem");
==================Q.js
var mongoose = require("mongoose");
var schema = new mongoose.Schema({
	"email" : String ,		 
	"content" : String , 
	"images" : [String] ,
	"time" : Date
});
module.exports = mongoose.model("Q" , schema);    //默认不需要s   数据库集中有s
=====================User.js
var mongoose = require("mongoose");
var schema = new mongoose.Schema({
	"email" : String ,		//email
	"password" : String ,	//密码，加密之后的密码
	"nickname" :{
		"type" : String,
		"default" : "没有昵称"
	},	//昵称
	"introduction" : {
		"type" : String,
		"default" : "这家伙很懒，什么都没有留下"
	},	//简介
	"avatar" : {
		"type" : String,
		"default" : "/images/defaultavatar.png"
	} //数据库中不保存图片，只保存图片的文件名。
});
module.exports = mongoose.model("User" , schema);   //默认不需要s   数据库集中有s
=====================具体使用
var User = require("../models/User.js");
User.find({"email" : email} , function(err , results){ }


=====================增删查改
Teacher.find({},function(err,results){}   //查
=====改
(1) 查找到改好   再保存回去  results[0].save(function(err){ }
(2) 直接修改
Teacher.update({"name": "jay"},{"$set": {"age": 999}},function(err){})
=====删除
(1)查找到再删除
(2)直接删除
Teacher.remove({"name":"jay"},function(err){})
=======添加
(1) 先准备好数据再save
const s = new Student({
	"name": "bang",
	"sex": "男",
	"age": 20
});
s.save(function(err){}
(2)  直接添加
Teacher.create({
	"gonghao": "202012",
	"name": "jay",
	"age": 40
},function(err){
	console.log('添加')
	if(err){
		console.log('save failed',err);
	}else {
		console.log('save successed')
	}
});
==========检测是否存在集合
User.count({"email" : email} , function(err , count){ }