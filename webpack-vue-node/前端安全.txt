=======中间人攻击
中间人攻击是攻击方同时与服务端和客户端建立起连接, 并让对方任务连接是安全的, 
当实际上整个通信的过程都被攻击者控制了, 攻击者不仅能够获取双方的通信信息, 
还能修改通信信息.
(1)DNS欺骗   入侵DNS来将用户访问目标改为入侵者指定机器
(2)会话劫持, 在一次正常的通信过程中, 攻击者作为第三方参与其中, 
     或者在数据里添加其他信息, 甚至将双方的通信模式暗中改变, 即从直接联系变成有攻击者参与的联系

防御: 
(1)对于DNS欺骗, 检测本机的HOSTS文件
(2)对于会话劫持: 使用交换式网络替代共享式网络, 还必须使用静态ARP, 
     捆绑MAC+IP等方式来限制欺骗, 以及采用认证方式的连接等

====xss跨站脚本攻击原理？如何进行？防御手段？
(1)xss将代码注入到页面中
如何进行：如何XSS是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，
       进而添加一些代码，嵌入到web页面中去。使别的用户访问都会执行相应的嵌入代码。
       从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。

主要原理：过于信任客户端提交的数据！
防御手段:  不信任任何客户端提交的数据，只要是客户端提交的数据就应该先进行相应的过滤处理然后方可进行下一步的操作。
(1)使用转义字符过滤html代码
(2)过滤sql代码

===CSRF跨站请求伪造原理？如何进行？防御手段？
csrf跨站请求伪造. 攻击者会虚构一个后端请求地址, 诱导用户通过某些途径去发送请求.

如何进行：当你在某网页登录之后，在没有关闭网页的情况下，收到别人的链接。
                  例如:http://127.0.0.1/dvwa/vulnerabilities/csrf/?password_new=1&password_conf=1&Change=Change#
                  点击链接，会利用浏览器的cookie把密码改掉。
主要原理：在没有关闭相关网页的情况下，点击其他人发来的CSRF链接，
                  利用客户端的cookie直接向服务器发送请求
防御手段：
(1)检测HTTP 中Referer字段
(2)请求地址中添加token并认证
(3)接口防跨域处理
(4)get请求不对数据进行修改
(5)http头中添加自定义属性并验证
(6)不让第三方网站访问用户cookie

业务上要求用户输入原始密码（简单粗暴），攻击者在不知道原始密码的情况下，无论如何都无法进行CSRF攻击。

====Sql脚本注入原理？如何进行？防御手段？  
如何进行：利用现有应用程序，将（恶意）的SQL命令注入到后台数据库引擎执行的能力，它可以通过在Web表单中输入（恶意）SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句。
主要原理：通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令
防御手段：(1)使用预编译，绑定变量（推荐）(2)检查数据类型  (3)过滤特殊字符和语句 (4)页面不错误回显。

