key的作用: 用于优化patch
1.key的作用主要是为了更高效的对比虚拟DOM
2.vue在patch过程中,判断两个节点是否是相同节点是, key是必要条件, 渲染一组列表时, key往往是唯一标识
所以如果不定义key的话,vue只能认为比较的两个节点是同一个,哪怕它们实际上不是,这导致了频繁更新元素,使得整个patch过程比较低效,影响性能
3.实际使用中在渲染一组列表时key必须设置, 而且必须是唯一标识, 应该避免使用数组索引作为key, 这可能导致一些隐蔽的bug; 
   vue中在使用的
patch(打补丁)
patch.js  patchVnode函数中  diff操作  sameVnode

说说双向绑定以及它的实现原理?
3w1h
1.给出双向绑定的定义
2.双向绑定带来的好处  (1)视图，数据，结构分离  (2)只需要操作数据, 视图就会发生改变, 不需要操作dom
3.在哪使用绑定   表单中  自定义组件上
4.使用方式   自定义组件里面model选项你怎么用？ 
5.扩展:  使用细节  原理实现描述
1.vue中双向数据绑定是一个指令v-model,可以绑定一个动态值到视图,同时
追问:
v-model  和 sync修饰符有什么区别
   v-model表单项, 子组件中可以控制事件和属性名
   .sync属性由组件指定, 且事件名称是固定的,  子组件更新这个属性$emit('update',xxx)
events.js  rendtime addEventlistener

了解vue中的diff算法?
3w1h
1.定义diff
2.它的必要性
3.它在哪里被使用
4.它是如何运作
5.提升: 说一些细节
每个组件一个wather
lifecycle.js Line 67 _update 

vue中组件之间的通信方式?
vue是组件化开发框架,所以对于vue应用来说组件间的数据通信非常重要

1.
props     父->子
$emit/$on  子->父
$parent $children父子
$attrs/$listeners   爷孙通信   
provide  inject  祖代/后代
ref            父子
$root        跨层级
eventBus  同上
vuex          同上
https://github.com/57code/vue-interview  面试题

vue.js它是一款渐进式框架，采用自底向上增量开发的设计.
      组件系统（components）客户端路由（vue-router）大规模状态管理（vuex）

1.Vue的双向数据绑定原理是什么？
vue.js 是采用数据劫持结合发布者-订阅者模式的方式，
通过Object.defineProperty()来劫持各个属性的setter，getter，
在数据变动时发布消息给订阅者，触发相应的监听回调。

2.vue-cli Vue脚手架  用来快速构建vue项目

3.
===============================vue使用注意
组件名多个单词组成
props尽量详细
组件data是一个函数
避免使用v-for  v-if混用
v-for设置key
复杂逻辑使用computed计算属性

1.说说你对 SPA 单页面的理解，它的优缺点分别是什么？
SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，
SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，
UI 与用户的交互，避免页面的重新加载。

优点：
1.用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；
2.基于上面一点，SPA 相对对服务器压力小；
3.前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；
缺点: 
1.初次加载耗时多：为实现单页 Web 应用功能及显示效果，
   需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；
2.前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，
   所有的页面切换需要自己建立堆栈管理；
3.不利于SEO ,由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。

2.v-show 与 v-if 有什么区别？
v-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；
      也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。
v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。

v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景； v-show 则适用于需要非常频繁切换条件的场景。

3.Class 与 Style 如何动态绑定？  :style会自动添加前缀
class对象语法   注意类名有-号时要有''
<div v-bind:class="{ active: isActive, 'text-danger': hasError }"></div>
data: {
  isActive: true,
  hasError: false
}
数组语法
<div v-bind:class="[isActive ? activeClass : '', errorClass]"></div>
data: {
  activeClass: 'active',
  errorClass: 'text-danger'
}
=====style对象语法
<div v-bind:style="{ color: activeColor, fontSize: fontSize + 'px' }"></div>
data: {
  activeColor: 'red',
  fontSize: 30
}
style数组语法
<div :style="[styleColor, styleSize]"></div>

data: {
  styleColor: {
     color: 'red'
   },
  styleSize:{
     fontSize:'23px'
  }
}

4.怎样理解 Vue 的单向数据流？
     所有的 prop 都使得其父子 prop 之间形成了一个单向下行绑定：父级 prop的更新会向下流动到子组件中，
但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解
    *子组件想修改时，只能通过 $emit 派发一个自定义事件，父组件接收到后，由父组件修改。
      希望将其作为一个本地的 prop 数据来使用，定义一个本地的 data 属性， 当接收的值需要转换时用computed计算属性
props: ['initialCounter'],
data: function () {
  return {
    counter: this.initialCounter  //本地data接受
  }
}
当接收的值需要转换时用computed计算属性
props: ['size'],
computed: {
  normalizedSize: function () {
       return this.size.trim().toLowerCase()
  }
}
5.computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，
下一次获取 computed 的值时才会重新计算 computed  的值；

watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；
computed使用场景:
当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，
因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；

watch使用场景: 
当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，
使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，
并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。

6.直接给一个数组项赋值，Vue 能检测到变化吗？
由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：
当你利用索引直接设置一个数组项时，例如：vm/this.items[indexOfItem] = newValue
当你修改数组的长度时，例如：vm/this.items.length = newLength   似乎可以设置
// Vue.set
Vue.set(vm.items, indexOfItem, newValue)
// vm.$set，Vue.set的一个别名
vm.$set(vm.items, indexOfItem, newValue)
// Array.prototype.splice
vm.items.splice(indexOfItem, 1, newValue)

7.谈谈你对 Vue 生命周期的理解？ (1)
(1)生命周期是什么?  
      Vue 实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模版、挂载 Dom -> 渲染、更新 -> 渲染、卸载等一系列过程，我们称这是 Vue 的生命周期。

(2)各个生命周期的作用
它的生命周期中有多个事件钩子，让我们在控制整个Vue实例的过程时更容易形成好的逻辑
beforeCreate  组件实例被创建之初，组件的属性生效之前  应用: loading 
created  组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用   应用: 异步请求
beforeMount在挂载开始之前被调用：相关的 render 函数首次被调用
mounted  el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子 应用:  操作dom节点
beforeUpdate  组件数据更新之前调用，发生在虚拟 DOM 打(patch)补丁之前  不能在这里更改数据  死循环
update  组件数据更新之后  应用: 操作新dom节点
beforeDestory   组件销毁前调用  应用: 清除定时器   清除绑定事件
destoryed          组件销毁后调用
activited        keep-alive 专属，组件被激活时调用    初始化操作放在这里
deactivated   keep-alive 专属，组件被销毁时调用    移除操作放在这里
Vue生命周期总共有几个阶段？
   它可以总共分为8个阶段：创建前/后, 载入前/后, 更新前/后, 销毁前/销毁后
第一次页面加载时会触发哪几个钩子函数
    beforeCreate, created, beforeMount, mounted 这几个钩子
DOM渲染在哪个周期中就已经完成？
     DOM 渲染在 mounted 中就已经完成了

8.Vue 的父组件和子组件生命周期钩子函数执行顺序？
Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：
加载渲染过程
父 beforeCreate -> 父 created -> 父 beforeMount -> 子 beforeCreate -> 子 created -> 子 beforeMount -> 子 mounted -> 父 mounted

子组件更新过程   父 beforeUpdate -> 子 beforeUpdate -> 子 updated -> 父 updated

父组件更新过程   父 beforeUpdate -> 父 updated

销毁过程    父 beforeDestroy -> 子 beforeDestroy -> 子 destroyed -> 父 destroyed

9、在哪个生命周期内调用异步请求？
可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是本人推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：
(1)能更快获取到服务端数据，减少页面 loading 时间；
(2)ssr 不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；

10、在什么阶段才能访问操作DOM？
在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。vue 具体的生命周期示意图可以参见如下，理解了整个生命周期各个阶段的操作，关于生命周期相关的面试题就难不倒你了。

11、父组件可以监听到子组件的生命周期吗？
(1)通过$emit手动触发父组件的事件
// Parent.vue
<Child @mounted="doSomething"/>
    
// Child.vue
mounted() {
  this.$emit("mounted");
}
(2)更简单的方式可以在父组件引用子组件时通过 @hook 来监听即可
//  Parent.vue
<Child @hook:mounted="doSomething" ></Child>

doSomething() {
   console.log('父组件监听到 mounted 钩子函数 ...');
},
    
//  Child.vue
mounted(){
   console.log('子组件触发 mounted 钩子函数');
},    
// 以上输出顺序为：// 子组件触发 mounted 钩子函数  // 父组件监听到 mounted 钩子函数 ..

12.谈谈你对 keep-alive 的了解？
keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：
(1) 一般结合路由和动态组件一起使用，用于缓存组件；
(2)  提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，
       exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比include 高；
(3)对应两个钩子函数 activated 和 deactivated
    当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。

13.组件中 data 为什么是一个函数？
因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。

14、v-model 的原理？
我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select  radio等元素上创建双向数据绑定，
我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：
text 和 textarea 元素使用 value 属性和 input 事件；
checkbox 和 radio 使用 checked 属性和 change 事件；
select 字段将 value 作为 prop 并将 change 作为事件。
在自定义组件中，v-model 默认会利用名为 value 的 prop 和名为 input 的事件

15、Vue 组件间通信有哪几种方式？
      Vue 组件间通信只要指以下 3 类通信：父子组件通信、隔代组件通信、兄弟组件通信，
下面我们分别介绍每种通信方式且会说明此种方法可适用于哪类组件间通信。
(1)props / $emit  适用 父子组件通信
    this.$emit('changeFather','joycechu')
(2)ref  与 $parent / $children 适用 父子组件通信
  ref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例
  $parent / $children：访问父 / 子实例  this.$parent.msg   this.children[0].msg  可以互相修改

(3)$attrs / $listeners  provide / inject 适用于隔代组件通信，

(4)EventBus （$emit / $on）  适用于 父子、隔代、兄弟组件通信
     myBus.$emit('addShopCart', this.buyNum);
     这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心），用它来触发事件和监听事件，
     从而实现任何组件间的通信，包括父子、隔代、兄弟组件。

(4)Vuex 适用于 父子、隔代、兄弟组件通信
Vuex是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。
“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。
Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，
若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。
改变 store 中的状态的唯一途径就是显式地提交  (commit) mutation。
这样使得我们可以方便地跟踪每一个状态的变化。

16、你使用过 Vuex 吗？
Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store仓库), store”
 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。
(1)Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，
若 store 中的状态发生变化，那么相应        的组件也会相应地得到高效更新。
(2)改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。
主要包括以下几个模块：
State：     定义了应用状态的数据结构，可以在这里设置默认的初始状态。
Getters： 允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。  getNum(state){}
computed: {
    ...mapState([
         'network'
   ]) 
    ...mapGetters([
      'getNum'
    ])
 }   //示例
Mutations：是唯一更改 store 中状态的方法，且必须是同步函数。  addNum(state,num) { }
Actions：    用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。addNumByAct({commit},num) { } 
Module：    允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。
场景有：组件之间的状态  登录状态、 音乐播放、 加入购物车

17、使用过 Vue SSR 吗？说说 SSR？
        Vue.js 是构建客户端应用程序的框架。默认情况下，可以在浏览器中输出 Vue 组件，进行生成 DOM 和操作 DOM。然而，也可以将同一个组件渲染为服务端的 HTML 字符串，将它们直接发送到浏览器，最后将这些静态标记"激活"为客户端上完全可交互的应用程序。
即：SSR大致的意思就是vue在客户端将标签渲染成的整个 html 片段的工作在服务端完成，服务端形成的html 片段直接返回给客户端这个过程就叫做服务端渲染。
服务端渲染 SSR 的优缺点如下：
（1）服务端渲染的优点：
更好的 SEO： 因为 SPA 页面的内容是通过 Ajax 获取，而搜索引擎爬取工具并不会等待 Ajax 异步完成后再抓取页面内容，所以在 SPA 中是抓取不到页面通过 Ajax 获取到的内容；而 SSR 是直接由服务端返回已经渲染好的页面（数据已经包含在页面中），所以搜索引擎爬取工具可以抓取渲染好的页面；
更快的内容到达时间（首屏加载更快）： SPA 会等待所有 Vue 编译后的 js 文件都下载完成后，才开始进行页面的渲染，文件下载等需要一定的时间等，所以首屏渲染需要一定的时间；SSR 直接由服务端渲染好页面直接返回显示，无需等待下载 js 文件及再去渲染等，所以 SSR 有更快的内容到达时间；
（2) 服务端渲染的缺点：
更多的开发条件限制： 例如服务端渲染只支持 beforCreate 和 created 两个钩子函数，这会导致一些外部扩展库需要特殊处理，才能在服务端渲染应用程序中运行；并且与可以部署在任何静态文件服务器上的完全静态单页面应用程序 SPA 不同，服务端渲染应用程序，需要处于 Node.js server 运行环境；
更多的服务器负载：在 Node.js  中渲染完整的应用程序，显然会比仅仅提供静态文件的  server 更加大量占用CPU 资源 (CPU-intensive - CPU 密集)，因此如果你预料在高流量环境 ( high traffic ) 下使用，请准备相应的服务器负载，并明智地采用缓存策略。

18、vue-router 路由模式有几种？
vue-router 有 3 种路由模式：hash、history、abstract，对应的源码如下所示：
(1)hash:  使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器；
(2)history :  依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式；
(3)abstract :  支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式.

19、能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？
hash  路由模式的实现主要是基于下面几个特性：  location.hash    window.hashchange = function(){}
URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；
(1)hash 路由模式的实现主要是基于下面几个特性：
hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；
可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用  JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；
我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。
(2)history 路由模式的实现主要基于存在下面几个特性：  location.pathname   自定义事件 | 手动触发
pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；
我们可以使用 popstate  事件来监听 url 的变化，从而对页面进行跳转（渲染）；
history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。

20、什么是 MVVM？
MVVM 源自于经典的 Model–View–Controller（MVC）模式  ，MVVM 的出现促进了前端开发与后端业务逻辑的分离，极大地提高了前端开发效率，MVVM 的核心是 ViewModel 层，它就像是一个中转站（value converter），负责转换 Model 中的数据对象来让数据变得更容易管理和使用，该层向上与视图层进行双向数据绑定，向下与 Model 层通过接口请求进行数据交互，起呈上启下作用。
(1)View     是视图层，也就是用户界面。前端主要由 HTML 和 CSS 来构建 。
(2)Model  是指数据模型，泛指后端进行的各种业务逻辑处理和数据操控,
                 对于前端来说就是后端提供的 api 接口
(3)ViewModel 是由前端开发人员组织生成和维护的视图数据层。
        在这一层，前端开发者对从后端获取的Model数据进行转换处理，做二次封装，
        以生成符合 View 层使用预期的视图数据模型

21、Vue 是如何实现数据双向绑定的？
Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据
      输入框内容变化时，Data 中的数据同步变化。即 View => Data 的变化。
      Data 中的数据变化时，文本节点的内容同步变化。即 Data => View 的变化。
Vue主要通过以下 4 个步骤来实现数据双向绑定的：
(1)实现一个监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，
    利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，
    给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。
(2)实现一个解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，
     然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，
     添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。
(3)实现一个订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，
     主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，
     触发解析器 Compile 中对应的更新函数。
(4)实现一个订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，
     对监听器 Observer 和 订阅者 Watcher 进行统一管理。

22、Vue 框架怎么实现对象和数组的监听？
如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，
但是  Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，
但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，
那它是怎么实现的呢？我们查看相关代码如下：我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，
从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。

23、Proxy 与 Object.defineProperty 优劣对比
Proxy 的优势如下:
(1)Proxy 可以直接监听对象而非属性；
(2)Proxy 可以直接监听数组的变化；
(3)Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；
(4)Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；
(5)Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；

Object.defineProperty 的优势如下:
兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,  而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。

24、Vue 怎么用 vm.$set(),this.$set 解决对象新增属性不能响应的问题 ？
受现代 JavaScript 的限制 ，Vue 无法检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的。但是 Vue 提供了 Vue.set (object, propertyName, value) / vm.$set (object, propertyName, value)  来实现为对象添加响应式属性，那框架本身是如何实现的呢？
(1)如果目标是数组，直接使用数组的 splice 方法触发相应式；
(2)如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用   defineReactive 方法进行响应式处理（ defineReactive 方法就是  Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）

25、虚拟 DOM 的优缺点？
优点：
(1)保证性能下限： 框架的虚拟 DOM 需要适配任何上层 API 可能产生的操作，它的一些 DOM 操作的实现必须是普适的，所以它的性能并不是最优的；但是比起粗暴的 DOM 操作性能要好很多，因此框架的虚拟 DOM 至少(2)可以保证在你不需要手动优化的情况下，依然可以提供还不错的性能，即保证性能的下限；
无需手动操作 DOM： 我们不再需要手动去操作 DOM，只需要写好 View-Model 的代码逻辑，框架会根据虚拟 DOM 和 数据双向绑定，帮我们以可预期的方式更新视图，极大提高我们的开发效率；
(3)跨平台： 虚拟 DOM 本质上是 JavaScript 对象,而 DOM 与平台强相关，相比之下虚拟 DOM 可以进行更方便地跨平台操作，例如服务器渲染、weex 开发等等。

缺点:
(1)无法进行极致优化： 虽然虚拟 DOM + 合理的优化，足以应对绝大部分应用的性能需求，但在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化。

26、虚拟 DOM 实现原理？
虚拟 DOM 的实现原理主要包括以下 3 部分：
   用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；
   diff 算法 — 比较两棵虚拟 DOM 树的差异；
   pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。


27、Vue 中的 key 有什么作用？
key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速。
(1)更准确：因为带 key 就不是就地复用了，在 sameNode 函数 a.key === b.key 对比中可以避免就地复用的情况。所以会更加准确。
(2)更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快，


28、你有对 Vue 项目进行哪些优化？
1）代码层面的优化
   v-if 和 v-show 区分使用场景
   computed 和 watch  区分使用场景
   v-for 遍历必须为 item 添加 key，且避免同时使用 v-if
   图片资源懒加载
   路由懒加载
   第三方插件的按需引入
   服务端渲染 SSR or 预渲染
   优化无限列表性能
   长列表性能优化
   事件的销毁
 
（2）Webpack 层面的优化
   Webpack 对图片进行压缩
   提取组件的 CSS
   提取公共代码
   减少 ES6 转为 ES5 的冗余代码   
   模板预编译
   优化 SourceMap
   构建结果输出分析
   Vue 项目的编译优化

（3）基础的 Web 技术的优化
开启 gzip 压缩
浏览器缓存
CDN 的使用
使用 Chrome Performance 查找性能瓶颈

29、对于即将到来的 vue3.0 特性你有什么了解的吗？
（1）监测机制的改变
（2）模板
（3）对象式的组件声明方式

============
1.使用 v-on 有几个好处：
(1)扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。
(2)因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。
(3)当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何清理它们。

2.v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。
修饰符: lazy  number trim

组件中
(1) 将其 value attribute 绑定到一个名叫 value 的 prop 上
(2) 在其 input 事件被触发时，将新的值通过自定义的 input 事件抛出

3.动态路由   标签页中
<component v-bind:is="currentTabComponent" class="tab"></component>
computed: {
          currentTabComponent: function() {
            return "tab-" + this.currentTab.toLowerCase();
          }
}

4.
(1)props中的驼峰命名在html需要改成短横线分隔命名
(2)传入数字时需要绑定一下    不能静态   静态是字符串
(3)props是单向下行绑定  父改子会改
    1.这个 prop 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 prop 数据来使用。
    2.这个 prop 以一种原始的值传入且需要进行转换。在这种情况下，最好使用这个 prop 的值来定义一个计算属性
(4)非 Prop 的 Attribute  会自动出现在组件根元素上
(5)替换/合并已有的 Attribute    form-control(子组件) date-picker-theme-dark(父组件)
 inheritAttrs: false,禁止继承

5.自定义事件   始终推荐使用短横线分隔命名


6.transition
(1)自动嗅探目标元素是否应用了 CSS 过渡或动画，如果是，在恰当的时机添加/删除 CSS 类名。
(2)如果过渡组件提供了 JavaScript 钩子函数，这些钩子函数将在恰当的时机被调用。
(3)如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作 (插入/删除) 在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，和 Vue 的 nextTick 概念不同)
enter-class
enter-active-class
enter-to-class (2.1.8+)
leave-class
leave-active-class
leave-to-class (2.1.8+)   //优先级高于普通类名


7.nextTick


8.路由跳转方式
1，<router-link to='home'> router-link标签会渲染为<a>标签，咋填template中的跳转都是这种；
2，另一种是编程是导航 也就是通过js跳转 比如 router.push('/home')
this.$router.push({name: newV});

9.computed
   1. computed是计算属性,也就是计算值,它更多用于计算值的场景
   2. computed具有缓存性,computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取   computed的值时才会重新调用对应的getter来计算
   3. computed适用于计算比较消耗性能的计算场景

10.vue的单项数据流
     父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导        致你的应用的数据流向难以理解

11.keep-alive
    keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染

12.v-model
    <input v-bind:value="something" v-on:input="something = $event.target.value">
   text 和 textarea 元素使用 value 属性和 input 事件；
   checkbox 和 radio 使用 checked 属性和 change 事件；
   select 字段将 value 作为 prop 并将 change 作为事件;


13.vue插槽
  单个插槽   父组件中编写的内容  直接插入子组件唯一的slot
  命名插槽   父组件v-slot:header   slot name="header"
  作用域插槽   父组件template v-slot:default="slotProps"

14.组件
  第一种：是全局导航钩子：router.beforeEach(to,from,next)，作用：跳转前进行判断拦截
  第二种：组件内的钩子
  第三种：单独路由独享组件

15.
    Vuex有5种属性: 分别是 state、getters、mutations、actions、module;

16.
   v-if 和 v-show 合理使用  区分使用场景
   computed 和 watch 区分使用场景
   v-for 遍历必须为 item 添加 key，且避免同时使用 v-if
   图片资源懒加载
   路由懒加载
   第三方插件的按需引入
   事件的销毁
   合理使用keep-alive
   合理使用异步组件
   服务端渲染 SSR or 预渲染
   长列表性能优化
   优化无限列表性能
   
父子组件的生命周期触发顺序?
加载渲染过程：
    父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted
子组件更新过程：
    父beforeUpdate->子beforeUpdate->子updated->父updated
父组件更新过程：
    父beforeUpdate->父updated
销毁过程：
   父beforeDestroy->子beforeDestroy->子destroyed->父destroyed


webpack
   Webpack 对图片进行压缩
   提取组件的 CSS
   提取公共代码
   减少ES6转为ES5的冗余代码
   模板预编译
   优化 SourceMap
   构建结果输出分析
   Vue 项目的编译优化

基于web优化
   CDN 的使用
   开启 gzip 压缩
   浏览器缓存
   使用 Chrome Performance 查找性能瓶颈


17. get和post的区别
1、get和post在HTTP中都代表着请求数据，其中get请求相对来说更简单、快速，效率高些
2、get相对post安全性低
3、get有缓存，post没有
4、get体积小，post可以无限大
5、get的url参数可见，post不可见
6、get只接受ASCII字符的参数数据类型，post没有限制
7、get请求参数会保留历史记录，post中参数不会保留
8、get会被浏览器主动catch，post不会，需要手动设置
9、get在浏览器回退时无害，post会再次提交请求


18.github
git clone 克隆到本地
git add 添加文件追踪
git commit -m  提交文件的命令
git  status  查看工作区状况
git  reflog

网络分层:
OSI模型
    应用层（Application）
    表示层（Presentation）
    会话层（Session）
    传输层（Transport）
    网络层（Network）
    数据链路层（Data Link）
    物理层（Physical）
TCP/IP模型
   应用层（Application）
   传输层（Host-to-Host Transport）
   互联网层（Internet）
   网络接口层（Network Interface）

19. HTTP/HTTPS
1、https协议需要到ca申请证书，一般免费证书较少，因而需要一定费用
2、http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl加密传输协议
3、http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443
4、http的连接很简单，是无状态的；HTTPS协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。


html优化
   1、避免 HTML 中书写 CSS 代码，因为这样难以维护。
   2、使用 Viewport 加速页面的渲染。
   3、使用语义化标签，增加可读性和 SEO。
   4、减少标签的使用，DOM 解析是一个大量遍历的过程，减少不必要的标签，能降低遍历的次数。
   5、避免 src、href 等的值为空，因为即时它们为空，浏览器也会发起 HTTP 请求。
   6、减少 DNS 查询的次数

css 优化
1、优化选择器路径：使用 .c {} 而不是 .a .b .c {}。
2、选择器合并：共同的属性内容提起出来，压缩空间和资源开销。
3、精准样式：使用 padding-left: 10px   而不是 padding: 0 0 0 10px。
4、雪碧图：将小的图标合并到一张图中，这样所有的图片只需要请求一次。
5、避免通配符：.a .b * {} 这样的选择器，根据从右到左的解析顺序在解析过程中遇到通配符 * {} 6、会遍历整个 DOM，性能大大损耗。
7、少用 float：float 在渲染时计算量比较大，可以使用 flex 布局。
8、为 0 值去单位：增加兼容性。
9、压缩文件大小，减少资源下载负担。

js优化
1、尽可能把 <script> 标签放在 body 之后，避免 JS 的执行卡住 DOM 的渲染，最大程度保证页面尽快地展示出来
2、尽可能合并 JS 代码：提取公共方法，进行面向对象设计等
3、CSS 能做的事情，尽量不用 JS 来做，毕竟 JS 的解析执行比较粗暴，而 CSS 效率更高。
4、尽可能逐条操作 DOM，并预定好 CSS 样式，从而减少 reflow回流 或者 repaint重绘 的次数。
5、尽可能少地创建 DOM，而是在 HTML 和 CSS 中使用 display: none 来隐藏，按需显示。
6、压缩文件大小，减少资源下载负担。
7、避免多次获取dom元素, 使用变量保存起来
