========个人介绍
面试官您好! 我叫王国粮, 大学本科, 学的专业是计算机科学与技术. 
我的只要技术栈是vue.js, 对node, webpack也有一定的了解. 
我在上一个家公司主要做了三个项目, 都已经写在简历上 . 欢迎提问问题. 

=============物业管理系统
页面资源的访问(导航菜单栏)和操作控制(按钮的增删改)
sys: user: add：新增 sys: user:edit： 编辑 sys:user:delete：删除    sys:user:view：查看。
最终实现的查看是通过菜单可见性
1.用户登录=>根据用户加载导航菜单(store)=>读取菜单树  
登录返回一个ids数组 [1,2,4]    修改store数据
2.用户登录=>根据用户加载权限标识集合 => 显示按钮状态
buttonList: { add: {}, edit: {} ,delete: {} }
[菜单名: { 二级菜单: { add: false, edit: false, delete: false }} ]
通过一个工具函数遍历计算状态  => 判断状态

============使用swiper
var swiper = new Swiper('.swiper-container', {
      direction: 'vertical',  //可以配置为垂直方向
      spaceBetween: 30,  //页与页之间间隔
      slidesPerView: 3,     //预览   三页显示在一起   auto 大小不定
      centeredSlides: true,  //移动  左右两侧有空白
      navigation: {   //上一页和下一页
        nextEl: '.swiper-button-next',
        prevEl: '.swiper-button-prev',
      },
      pagination: {
        el: '.swiper-pagination',  //分页器
        type: 'progressbar', //默认是圆点   progressbar 进度条  fraction
        clickable: true, //可以点击
      },
});

scrollbar: {   //一般不与pagination同时使用
        el: '.swiper-scrollbar',
        hide: true,
},

===================md5加密
1. 安装   npm install js-md5 -D
2. 项目中引入md5模块。
    import md5 from “js-md5” 使用：md5("加密内容")
    或者在main.js里面将md5转换为vue原型
    import md5 from “js-md5”
    Vue.prototype.$md5= md5 使用：this.$md5("加密内容")

=================表格组件封装
高内聚低耦合,尽可能少的暴露组件的api,将功能尽量封装在组件内部
组件内部根据业务需求设置了一些组件默认的配置项,另外再通过不同页面传入不同配置项提高组件的通用性

一般管理系统对表格会有以下需求
可以分页（需要有分页条）
可以多选（表格带复选框）
顶部操作按钮（新增，删除等）
表格每行行尾有操作按钮
表格行可以编辑
================详情页
<keep-alive>      
    <router-view v-if="$route.meta.keepAlive"/>    
</keep-alive>    
<router-view v-if="!$route.meta.keepAlive"/>复制代码

设置了keep-aliva的组件
第一次进入：beforeRouterEnter ->created->(beforeMount, mounted) -> activated ->(beforeUpdate,updated)-> deactivated
后续进入时：beforeRouterEnter -> activated -> deactivated

在列表页:
activated() { }   判断是否缓存了数据, isCache 没有则为第一次进入列表页, 获取数据
在详情页:
beforeRouteLeave (to, from, next) { }  判断是否to详情页面 是则更改缓存状态
在列表页:
this.$route.meta.isUseCache = false;  通过详情页面返回列表页面使用缓存之后, 将缓存状态又变回false 

我们知道，在vue这种单页应用中，如果你在a页面滚动了一段距离后，此时前往b页面后，b页面也会停留在a页面的滚动位置。这个问题的解决，我们可以利用router本身提供的功能来解决：

使用scrollBehavior:
scrollBehavior (to, from, savedPosition) {
    if (savedPosition) {        
          return savedPosition    
    } else {      
          if (from.meta.keepAlive) {        
               from.meta.savedPosition = document.body.scrollTop;      
          }        
          return {  x: 0,  y:  to.meta.savedPosition || 0 }    
    }  
}

if (savedPosition) {
    //返回之前的原位置
    // savedPosition 当且仅当 popstate 导航 (通过浏览器的 前进/后退 按钮触发) 时才可用。
    return savedPosition
  } else {
    const position = {}
    if (to.hash) {//如果路径中有哈希值，就采用锚点定位
      position.selector = to.hash
    }
    if (to.matched.some(m => m.meta.scrollToTop)) {//如果路由元信息中存在参数，对参数做进一步判断（此示例代表滚动到顶部）
      position.x = 0
      position.y = 0
    }
   //如果返回一个 falsy (假的值)，或者是一个空对象，那么不会发生滚动。
    return position
  }
===========自定义提示框
1.编写组件
2.通过一个函数调用extend()  new  myComponent()
3.将传入参数整合到组件中  propsData: { ...props}
4.将销毁方法作为属性放到实例中 最终会返回实例
5.  instance.vm = instance.$mount()  通过document.appendChild(instance.vm.$el) 挂载到页面中

=========
项目开发过程: 
        前后端分离, 有接口文档, 按照接口文档开发, 前端自己先模拟数据
       mock生成随机数据, 好处是团队可以并行工作有了Mock, 
前后端人员只需要定义好接口文档就可以开始并行工作, 互不影响. 


存在sessionStorage中  页面关闭就不存在了
下次免登陆就存在localstorage中, 根据token和用户信息判断, 一般根据token判断
七天免登陆:  可以把信息存在cookie里面, 设置失效时间为7天, 或者后天直接设置token失效时间为7天


=========自己搭建项目
自己学习项目中搭建过项目
安装webpack@3.12  vue-loader@14  vue-template-complier@2.6.12 
url-loader@0 file-loader@0 style-loader@0 css-loader@0
采坑点: vue-loader 版本大于15.x需要在webpack中声明vueLoader
webpack-dev-server@2
vue-router   vuex都使用最新版本

babel       es6转为es5
vue-jsx     vue的jsx写法
vue-style-loader   热加载css
scss-loader    配置了css预编译语言scss
postcss          css工程化管理工具
html-webpack-plugin  简化html文件创建
extract-text-webpack-plugin  抽离css样式
eslint          代码规范和错误检查工具
husky         提交前eslint校验和commit信息的规范校验代码
rimraf         删除构建出来的dist文件夹


项目: 
(1)人力管理系统: 
兼容性问题: ie9
pigx快速搭建项目结构  公司内置购买
    pigx是一个后台管理系统的解决方案, 公司购买的框架. 基于vue.js和element的二次分装
avue element      基于二次分装
vue-file-upload   文件上传功能
CryptoJS 加密 aes
amCharts实现系统数据可视化展示第三方数据可视化插件  可以兼容IE9+  基于flash实现的  
webStorage: token; 用户信息  菜单信息
加密: 密码 

(2)土咨网用户端
nginx:  后端人员提供的  自己启动起来  webpack

(3)
权限控制:  to组件 菜单信息列表[{ 路径 标题 children: child }]  next()默认跳转   不允许跳转到403页面  没有权限访问

0-20(人): 初创公司  9k  8k 7k
察言观色: 凝重(越说越嗨) 越聊越嗨
对贵公司有什么问题: 
(1)公司的福利待遇  (2)公司有技术交流会?  (3)如果我有幸入职, 我需要准备什么?
hr面你: 那家公司  没有买社保  补贴
提前准备:  文件袋  空白的a4纸
8.40   9上班  1点投
外包项目: 
数据结构

=======webapp
地位上: web属于一种技术, 而webapp则是根据这一技术开发成的应用，web是源头，而webapp则是支流。一个具有完备实现某一个功能的程序，都可以称之为应用
功能上: web app特指的是用html5技术开发，之所以叫web app是因为他比较接近客户端应用程序的用户体验，可以和系统深度融合，调用一些只有客户端才能调用的功能


webapp是框架型APP开发模式(HTML5APP框架开发模式)，该开发具有跨平台的优势，该模式通常由“HTML5云网站+APP应用客户端”两部份构成，APP应用客户端只需安装应用的框架部份，而应用的数据则是每次打开APP的时候，去云端取数据呈现给手机用户。
移动Web App，只能使用有限的移动硬件设备功能。原生App，能够与移动硬件设备的底层功能，比如个人信息，摄像头以及重力加速器等


开发方面:
1、因为运行在移动设备的浏览器上，所以只需要一个开发项目
2、这种应用可以使用HTML5,CSS3以及JavaScript以及服务器端语言来完成(PHP,Rubyon Rails,Python)
3、这里可没有标准的SDK，基本任意选择别忘了有一些跨平台的开发工具，比如PhoneGap, Sencha Touch 2以及Appcelerator

获取方式: 
1、从移动设备上的浏览器访问
2、不需要安装额外的软件
3、软件更新只需要服务器就够了
4、因为现在没有什么商品或卖场提供这种App，所以如何搜索这些移动WebApp相当不简单
版本控制: 
移动Web App，所有的用户都是用同样的版本。
原生APP又称Native App，该开发针对IOS、Android、Windows等不同的手机操作系统要采用不同的语言和框架进行开发，该模式通常是由“云服务器数据+APP应用客户端”两部份构成，APP应用所有的UI元素、数据内容、逻辑框架均安装在手机终端上。

优势: 
1、跨平台开发，用户不需要去卖场来下载安装App
2、任何时候都可以发布App，因为根本不需要官方卖场的审核

获取方式:
1、直接下载到设备
2、以独立的应用程序运行(并不需要浏览器)
3、用户必须手动去下载并安装这些原生App
4、有一些商店与卖场来帮助用户寻找你的App

版本控制:
原生App，用户可以自由地选择是否更新软件版本，所以会出现不同用户同时使用不同版本的情况

优势: 
1、比移动Web App运行快
2、一些商店与卖场会帮助用户寻找原生App
3、官方卖场的应用审核流程会保证让用户得到高质量以及安全的App
4、官方会发布很多开发工具或者人工支持来帮助你的开发



