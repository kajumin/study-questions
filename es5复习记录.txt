===============es5新增  2009年
1.严格模式
2.JSON对象  JSON.parse()   JSON.stringify()
3.对象扩展   Object.create(object, descriptors); Object.defineProperties(object, descriptors)
   对象本身有两个方法set get
4.数组扩展 indexOf  lastIndexOf  forEach map filter some every  reduce rightReduce 
   es6: of from fill copywithin find  findIndex includes 
5.函数扩展 bind call apply

语法: 注释(单行 多行) 严格区分大小写   分号结尾 忽略多个空格和换行

======================数据类型
number string boolean undefined null(基本简单数据类型)  Object(复杂数据类型)

字面量: 固定不变的值, 可以直接使用
      数字字面量(整数 浮点数 特殊值) 字符串字面量 布尔值  undefined null

数字字面量:   typeof -> number
整数字面量: 二进制  十进制  八进制 十六进制
浮点数: 小数点 使用幂的计数
特殊值: Infinity -Infinity NaN
Number.MAX_VALUE   Number.MIN_VALUE
0.1+0.2 = 3.0000000000000004  //计算不精确

字符串字面量: 单引号 双引号不能嵌套   typeof -> string
\转义字符  \n换行   \t制表符   /r回车符

布尔值:  true false   typeof  -> boolean

undefined: 未定义的值  typeof -> undefined

null: 空对象  typeof -> object

================强制转换: String()  toString()  Number()  Boolean
toString()   undefined null 没有该方法
String()   undefined null 也可以使用
undefine null NaN转为 'undefined' 'null'  'NaN'
-123 -> '-123'  -Infinity -> '-Infinity'
-0 | 0 -> '0'
对象  -> [object  Object]
[] -> ''
[1,2] -> '1,2'

Number(17900).toExponential(2)   转为科学计数法  用来指定小数点后有几位数字 返回字符串
Number()
记忆: 
纯数字字符串,  转为number类型, 符号也有效
非纯数字字符串, 转为NaN
''   '   '  转为0
true  转为1
false 转为0
NaN 函数  数组 对象, 转为NaN ,  symbol 报错
空数组 -> 0
数组: 先toString()转为字符串 再转为数值 [] -> 0  [2] -> 2  [1,2] -> NaN
对象: 转为字符串[object Object] -> NaN
Object.prototype.toString.call([])  -> [object Array]

// 忽略第二个参数, 则根据字符串来判断  0x会识别为16进制
parseInt()      解析一个字符串并返回指定基数的十进制整数  第二个参数为转换字符串的进制
parseFloat()   字符串转为浮点数   第二个参数为进制
八进制: 0o  0O 
二进制: 0b  0B 
十六进制: 0x  0X 

Boolean:  六个为false(-0 | 0 | NaN  | undefined | null | false)
数值:  -0 | 0 | NaN -> 0 其他为true  包括Infinity  -Infinity
字符串: '' -> 0   空格组成的字符串为true
null -> false
undefined -> false
NaN -> false
对象: true
数组: true

隐式转换: !!a
================运算符
数学 | 算数运算符  + - * /  %  
一元运算符 + -
自增自减    ++ --
逻辑运算符  !  && ||
赋值运算符 =  += -= *= /=  %=
关系运算符 > < >=  <= 
相等运算符  == != === !==


算数运算符: + - * / %
转为字符串, 有一个是字符串
转为数值, 
有NaN参与的运算都是NaN   包含undefined, 因为undefined转为数值是NaN 
null为0  null + 1 => 1  null * 1 -> 0

一元运算符: + -
+: 没有任何影响  可以用于字符串转为number类型  其他转为NaN
- : 取反操作, 对于非数值,  先转为数值

自增自减:  新值: ++a --a   原来的值: a++  a--
++a  先变量自加1, 自加1之后的结果参与计算
a++  直接使用变量当前的值参与计算，计算之后变量再自加1

var d = 20
d++ + ++d + d = 64

逻辑运算符:  !(非运算) &&(与)  || (或)
!:  对一个布尔值进行取反操作, 对于非布尔值,  先转为布尔类型

&&: 
对于布尔值: 找false
对于非布尔值: 都为true, 返回最后那个原值, 否则返回最先为false的原值

||: 
对于布尔值: 找true
对于非布尔值: 都为false, 返回最后那个原值, 否则返回最先为true的原值

赋值运算符:  =  +=  -=   *=  /=  %= 

关系运算符: > <  >=  <= 
对于都是字符串: 比较unicode编码
对于非数值类型: 转为数值, 再比较
NaN: 都为false

unicode编码: 'a'.charCodeAt(0) -> 97(a)   '\u1c00' -> 对应一个字符
网页中使用 &#9825编码;  十进制

相等运算符: ==  !=   不会转换类型===全等  !==不全等
null不转为0   null == 0  -> false
复杂数据类型: 比较的是内存地址

运算符优先级: 
()
. [] 成员访问  new 函数调用 
后置递增  前置递增
逻辑非 一元加法 一元减法  前置递增 前置递减 typeof void delete await
乘除   加减
按位左移 按位右移
大于 小于 大于等于 小于等于 in instanceof
等号 非等号 全等号 非全等号
     按位与
     按位异或
逻辑与&&  逻辑或 ||
条件运算符  express ? trueValue: falseValue
赋值
逗号

运算符顺序：贴身的(++ -- !)  -> 数学 -> 比较 ->  逻辑 -> 赋值
==========================语句
程序由一条条语句组成的
代码块{}

1. 条件判断语句  if(条件表达式) { 语句 }  else if(条件表达式) else
2. 条件分支语句 switch(条件表达式) {case 表达式: 语句 break;  default: 语句 break; }
3. 循环语句 while(条件表达式)   do while至少执行一次
4. 循环语句 for( ; ; )   1.初始化  2.条件表达式  3.更新表达式  可以都不写

continue: 跳出当前这次循环
break: 跳出循环
break outer;  指定循环语句  outer: for(;;)

穷举法(for if配合)  
累加器  累乘器
================对象
复合的数据类型,  一个对象可以保存多个不同类型的值, 包括对象
基本数据类型都是单一的值, 值与值之间没有联系

分类:
  (1)内置对象: Math String Number Boolean Function Object Date RegExp
  (2)宿主对象: 由js运行环境提供的  如: dom bom  document console
  (3)自定义对象: 由开发人员创建的

创建对象: 
  (1) new Object()
  (2) {}  对象字面量的方式 可以直接指定对象的属性 特殊的属性名 加引号
  (3) 通过构造函数创建对象

属性名: 标识符 不强制规范, 尽量遵守 特殊 变量不能用.方式 使用[]方式
添加属性: 对象.属性名 = 值 对象[标识符(变量所代表的字符串)] = 值 
修改属性: 对象.属性名 = 新值
删除属性: delete 对象.属性名

基本数据类型的值直接保存在栈内存中
   值与值之间独立存在, 修改一个变量不会影响其他变量
复杂数据类型保存在堆内存中, 每创建一个对象, 就会在堆内存中开辟一个新的空间
   而变量保存的是对象的内存地址(对象的引用)

==========Date内置对象
var date = new Date()  //当前代码执行的时间
参数指定时间:  日期的格式  月份/日/年 时:分:秒  如: 12/18/2020 12:12:12
时间格式  
2020-12-18                 默认早上8点
2020-12-18 12:00:00    具体到时分秒
 
Date.now() 返回自1970年1月1日00:00:00 UTC以来的毫秒数
getTime()  时间戳  毫秒数  1970年1月1日
getDay()  星期几 0-6

getDate()  第几日  1-31
getMonth()  月份  0-11
getFulllYear() 年份 
getMinutes()  分钟 0-59
getSeconds()  秒数 0-59
getMilliseconds 毫秒数 0-999

toUTCString()  把一个日期转换为一个字符串，使用UTC时区
toString()  返回一个字符串，表示该Date对象
toDateString() 返回一个日期对象日期**部分**的字符串

Date 对象的 [@@toPrimitive]() 方法可以返回一个原始值，或是 string，或是number

如果 hint 是 "string" 或 "default"，[@@toPrimitive]() 将会调用 toString。如果 toString 属性不存在，则调用 valueOf。如果 valueOf 也不存在，则抛出一个TypeError。
如果 hint 是 "number"，[@@toPrimitive]() 会首先尝试 valueOf，若失败再尝试 toString。
=============Math 内置对象
Math.PI  圆周率
Math.abs()      计算一个数的绝对值
Math.ceil()      向上取整  变大
Math.floor()    向下取整
Math.round()  四舍五入
Math.random()  0-1随机数
如1-6之间的数:  Math.round(Math.random()*5+1)
Math.max() 可以获取多个数中的最大值  Math.max.apply(null, arr)
                  有undefined NaN空位  转为数组为NaN的值  则为NaN
Math.min()  可以获取多个数中的最小值 
Math.pow(x,y)  计算幂的计算，第一个参数书写底数，第二个参数书写指数
Math.sqrt()  开方运算

==============JSON对象
JSON就是一个特殊格式的字符串，这个字符串可以被任意的语言所识别，并且可以转换为任意语言中的对象，JSON在开发中主要用来数据的交互

JSON和JS对象的格式一样，只不过JSON字符串中的属性名必须加双引号
JSON中允许的值：
1.数值
2.字符串
3.布尔值
4.null
5.对象
6.数组

不能为undefined 函数function  忽略
NaN变为null


JSON.stringify()    可以将一个JS对象转换为JSON字符串   只串行化对象自身的可枚举属性
JSON.parse()        可以将以JSON字符串转换为js对象
================函数
也是对象, 封装一些功能
var fun = new Function('console.log('hello')')  以字符串的形式传递给函数
fun()  调用

声明函数: function fun([形参1, 形参2, ...形参N]) {}
fun(实参)  实参赋值给形参

函数表达式: var fun = function() {}

形参: 不会检查类型(任意类型: 数组 对象 函数) 如有需要可以进行类型检查, 多余是undefined
实参: 不会检查数量 多余参数不会被赋值

arguments: 实参的对象集合(不定义形参也存在)  有iterator接口   可以使用扩展运算符  解构赋值
   类数组对象  arguments instanceof Array   |  Array.isArray(arguments)-> false
   转为数组     [].slice.call(arguments)  Array.from(arguments)  |   [...arguments]
   lenth属性: 实参的个数
   callee属性: 指向当前调用的函数

  func.caller  调用该函数的函数
  func.arguments  调用该函数的实参
严格模式不能使用arguments.callee  inner.caller  inner.arguments
但是可以使用arguments

return: 定义函数的返回值 可以用变量来接收 同时终止函数的执行

立即执行函数(IIFE): (function () { })()  函数定义完就立即执行

对象的方法: 对象的属性值是函数, this指向当前对象
   for...in  枚举对象的可遍历属性(包含原型上的属性)

作用域: 全局作用域 和 函数作用域
    函数作用域: 函数调用时创建, 执行完销毁
    访问一个变量, 先在自身作用域中查找, 找不到会则向上级作用域中查找

debug: add selected text to watches
变量提升: var 声明的变量  函数声明都会提升到顶部, 函数提升优先于变量提升

this函数上下文对象
this指向: 函数调用 -> window    对象方法 -> 该对象  构造函数 -> 新创建的对象
              箭头函数 -> 定义时所在的对象
              对象方法用变量保存起来后调用 -> window

函数的方法:  call  apply  bind

工厂方法创建对象: var obj = new Object() 无法匹配多种不同类型的对象

构造函数: 首字母大写 var per = new Person()
创建四步: 
      (1)创建一个对象
      (2)this指向该对象
      (3)执行函数体
      (4)返回该对象
方法: 可以使用全局函数  但是有缺点

原型对象: 构造函数.prototype  实例._proto_   
   所有构造函数实例都可以访问到原型对象上的属性和方法
   当访问对象中的一个属性或方法时, 自身对象找不到时, 会在原型对象上查找
  

instanceof   用于检测构造函数的prototype属性是否出现在某个实例对象的原型链上
in   指定的属性在指定的对象或其原型链中
hasOwnProperty  指定对象自身属性中是否具有指定的属性
for in  遍历对象自身及原型链上的可枚举属性
Object.getOwnPropertyNames(obj)   返回一个由指定对象的所有自身属性的属性名(包括不可枚举属性但不包括Symbol值作为名称的属性)组成的数组
Object.getOwnPropertyDescriptor({name: 'bang'}, 'name')  返回指定对象属性的描述信息 {value}
=============
Object.defineProperty(Number, 'isFinite', { value: })  默认都是false
configurable:    属性是否可以被删除,  属性是否可以更改
writable:  对象属性是否可修改  默认为true
enumerable:  是否可枚举


toString()方法 
垃圾回收(GC): 当一个对象没有任何变量或者属性对它进行引用, 垃圾回收机制会自动回收该对象

String()  Number() Boolean() 将基本数据类型的数据转换为对象, 导致不可预期的效果
创建出来是一个对象  typeof -> object
tips: 当我们对一些基本数据类型的值去调用属性和方法时，
浏览器会临时使用包装类将其转换为对象, 然后在调用对象的属性和方法, 调用完以后, 在将其转换为基本数据类型
==================数组
数组也是一个对象

读取数组中的元素:  数组[索引]
获取数组的长度:  数组.length
修改length:    length大于原长度 则多出部分会空出来
length小于原长度, 则会删除多出的元素

创建数组: 
   (1)new Array()
   (2) []  数组字面量

数组方法: 
push    可以向数组末尾添加一个或者多个元素, 返回新数组长度
pop      删除数组的最后一个元素, 将被删除的元素作为返回值返回
unshift 可以向数组开头添加一个或者多个元素, 返回新数组长度  其他元素的索引会改变
shift     删除数组的最第一个元素, 将被删除的元素作为返回值返回

concat()   连接两个或多个数组或者值  返回新数组  不影响原数组
slice(start[, end]) end不包含  省略则截取到数组末尾  负值为倒序
splice(start, howmany[, elements])  start开始位置的索引 howmany删除项数量  elements添加元素  返回删除项组成的新数组
join()        数组转换为一个字符串   指定字符串作为数组中元素的连接符 默认字符(',')
reverse()   反转数组  会修改原数组

sort()  对数组进行排序, 会影响原数组 默认会按照Unicode编码进行排序
          a - b升序   b - a 降序
          返回大于0的值  位置不变
          返回小于0的值  交换位置
         若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。
         若 a 等于 b，则返回 0。
         若 a 大于 b，则返回一个大于 0 的值。

遍历数组: forEach map filter some every  第二个参数指定this  兼容性: IE9+ 
indexOf  lastIndexOf   reduce rightReduce

es6:
for...of      
Array.from
Array.of
copyWithin(target, start, end)
find   指定this
findIndex  指定this
fill(value, start, end)
entries keys values
空位: es5跳过  es6视为undefined
=================字符串
在js底层, 字符串是以字符数组的形式保存的  ['a', 'b', 'c']

length属性: 返回字符串的长度
charAt(x)    返回字符串中x位置的字符，下标从 0 开始
charCodeAt()  返回字符串中`x`位置处字符的`unicode`值
String.fromCharCode()   转换一组Unicode值转换为字符
indexOf(substr, [start]) 返回字符串中搜索到的字符或子字符串的第一次出现索引  没有则返回-1 lastIndexOf(substr, [start])  返回字符串中搜索到的字符或子字符串的最后一次出现索引  没有则返回-1
concat()    连接两个或者多个字符串数组或值

match(reg)  根据正则表达式在字符串中搜索匹配项。如果没有找到匹配项，则返回一个信息数组或null
replace(reg/substr, replaceText)  替换指定字符或者正则匹配
split(delimiter, [limit])  limit最大的数组数
search(reg)  用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串

slice(start, [end])  返回新的字符串, 包括字符串从包括start到不包括end为止的所有字符  负数倒序
substr(start, [length])  返回新字符串 从包括 start 所指的字符处开始的length个字符
substring(from, [to]) 返回新字符串  包括字符串从包括from到不包括to为止的所有字符 负数当做0

toUpperCase()  转为大写
toLowerCase()  转为小写
valueOf()  返回一个String对象的原始值
trim()   去除首尾空格   

es6方法:
includes()
startsWith()
endsWith()
repeat()  返回一个新字符串 指定重复次数  
padStart()
padEnd()
===================正则  
定义字符串的规则, 检测字符串是否符合规则, 将符合规则的内容提取出来
创建正则: 
(1) var reg = new RegExp('正则表达式', '匹配模式')
(2) var reg = /abc/g  字面量

修饰符: 
i: 忽略大小写
g: 全局匹配
s: dotAll模式  .代表一切字符


|       或
[]      字符集 也是或的关系
[^]   ^排除
()  分组   \1引用分组
^开头
$结尾
\      转义字符
.      任意字符  除了回车和换行之外所有的字符   需要s修饰符

注意: 
[A-z]  可以表示大小写字母集合
[\u4e00-\u9fa5]   中文

量词: 
{n}    真好n次
{m, n}  m-n次
{m, }  m个以上 
+  1个以上
*   0个或多个
?   0个或1个

字符集
\w    任意字母、数字、_  [A-z0-9_]
\W    除了字母、数字、_  [^A-z0-9_]
\d     任意的数字 [0-9]
\D     除了数字 [^0-9]
\s      空格
\S      除了空格
\b      单词边界
\B      除了单词边界

str.replace(/^\s* | \s*$/g,""); //去除首尾空格
 
正则方法: 
(1) reg.test(str)
(2) exec():  用于字符串匹配，返回数组  没有全局方法g

字符串中使用正则表达式: split search replace 
split      分隔字符串为数组  返回数组 没有全局方法g
search   搜索字符串中是否含有指定内容  返回第一次出现的索引  没有为-1  没有全局方法g

match  字符串中将符合条件的内容提取出来, 返回数组 
            有全局方法g时, 返回数组为每个匹配到的内容集合
            没有全局方法g, 返回第一个匹配的信息,  包含匹配内容  匹配的索引值index
replace 替换 将符合条件的内容替换指定字符, 返回替换后的字符串 有全局方法g 

===============隐式转换 特殊:
Boolean(new Number(0)   //new String()  new Boolean(false)   都为真
var num = new Number()  //typeof  num -> object
num.valueOf()  === num  -> false   类型不一样   前者为对象
0.1 + 0.5 == 0.6  -> true
0.1 + 0.2 == 0.3  -> false
Math.max() -> Infinity
Math.min() -> -Infinity

(! + [] + [] + ![]).length -> 9
true + '1' -> true1
1 + {} -> 1[object Object]
1 + function() {} -> 1function(){}
1 + new Date()   -> 1Wed Jan 06 2021 03:02:51 GMT+0800 (中国标准时间)

== 宽松相等 不是严格相等
// 1.类型相同  number(NaN) string(unicode字符编码) Boolean Object(引用地址)一个个分析
// 2. 两个都是null和undefined 就为真 只有一个则为假  两个或者一个NaN 都为假
// 3.string boolean都是转为number再进行比较
// 4.对象则转为基本类型 valueOf() toString()

(1)undefined == 0 -> fasle   一方为null或undefined都为false
    undefined - 1 -> NaN
(2)null == 0 -> false      一方为null或undefined都为false
    null - 1  ->  -1
(3)true == 'true' -> false //1  NaN
(4)123 == '123' -> true   //123  123
(5)true == '1'  -> true      //1  1
(6)false == '0' -> true      //0  0
(7){} == '[object Object]'
(8)[] == ''
(9)[1,2,3] == '1,2,3'
{} == {}  -> false
[] == ![] -> true  
[] == []  -> false
[] + [] -> ''    '' + '' -> ''
[] -  []  -> 0   0 - 0
[1] - 1 -> 0
[] - 1 -> -1

优先级:
()
. [] 成员访问  new 函数调用 
后置递增  前置递增
前置递增 前置递减   逻辑非 一元加法 一元减法  typeof void  delete await
乘除
加减
   按位左移 按位右移
大于 小于 大于等于 小于等于 in instanceof
等号 非等号 全等号 非全等号
   按位与
   按位异或
逻辑与 逻辑或
条件运算符
赋值
逗号


